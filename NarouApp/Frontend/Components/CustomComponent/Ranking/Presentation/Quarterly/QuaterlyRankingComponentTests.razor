@using Bunit
@using Moq
@using NarouApp.Frontend.Components.CustomComponent.Ranking.Application
@using NarouApp.Frontend.Components.CustomComponent.Ranking.Application.Quarterly
@using NarouApp.Frontend.Components.CustomComponent.Util
@using Xunit
@inherits Bunit.TestContext

@code {
    [Fact] public void ShouldRenderQuaterlyRankingComponentResultNotEmpty() {
        var mockUseCase = new Mock<IBaseUseCase<RankingInput, List<RankingOutPut>>>();
        Services.AddKeyedSingleton(nameof(QuarterlyRankingUseCase), mockUseCase.Object);
        mockUseCase.Setup(static useCase => useCase.Invoke(It.IsAny<RankingInput>())).Returns(Task.FromResult<List<RankingOutPut>>([new RankingOutPut("Ncode", 1, 1)]));
        var cut = Render(@<QuarterlyRankingComponent/>);
        cut.Find("ul").MarkupMatches(@<ul>
            <li>Ncode</li><li>1</li><li>1</li>
        </ul>);
    }

    [Fact] public void ShouldRenderQuaterlyRankingComponentResultEmpty() {
        var mockUseCase = new Mock<IBaseUseCase<RankingInput, List<RankingOutPut>>>();
        Services.AddKeyedSingleton(nameof(QuarterlyRankingUseCase), mockUseCase.Object);
        mockUseCase.Setup(static useCase => useCase.Invoke(It.IsAny<RankingInput>())).Returns(Task.FromResult<List<RankingOutPut>>([]));
        var cut = Render(@<QuarterlyRankingComponent/>);
        cut.Find("ul").MarkupMatches(@<ul></ul>);
    }
}